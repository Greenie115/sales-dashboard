{"version":3,"file":"static/js/176.a1762895.chunk.js","mappings":"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","sources":["components/sharing/SharedDashboardView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useTheme } from '../../context/ThemeContext';\nimport { useSharing } from '../../context/SharingContext';\nimport { useData } from '../../context/DataContext';\nimport { ClientDataProvider } from '../../context/ClientDataContext';\nimport SummaryTab from '../dashboard/tabs/SummaryTab';\nimport SalesTab from '../dashboard/tabs/SalesTab';\nimport DemographicsTab from '../dashboard/tabs/DemographicsTab';\nimport OffersTab from '../dashboard/tabs/OffersTab';\nimport ErrorBoundary from '../ErrorBoundary';\nimport sharingService from '../../services/sharingService';\n\n// Create a more reliable function for getting client name with proper fallbacks\nconst getClientDisplayName = (config) => {\n  // First try metadata.clientName as it's the most authoritative\n  if (config.metadata?.clientName) {\n    return config.metadata.clientName;\n  }\n  \n  // Then try brandNames from various sources\n  if (config.metadata?.brandNames && config.metadata.brandNames.length > 0) {\n    return config.metadata.brandNames.join(', ');\n  }\n  \n  if (config.brandNames && config.brandNames.length > 0) {\n    return config.brandNames.join(', ');\n  }\n  \n  // Try the precomputed data\n  if (config.precomputedData?.clientName) {\n    return config.precomputedData.clientName;\n  }\n  \n  if (config.precomputedData?.brandNames && config.precomputedData.brandNames.length > 0) {\n    return config.precomputedData.brandNames.join(', ');\n  }\n  \n  // Default fallback\n  return 'Client';\n};\n\n// This component acts as a bridge between the ClientDataContext and the tab components\nconst createSharedDataContext = (clientData) => {\n  return {\n    // Pass through all data from clientData\n    ...clientData,\n    \n    // Ensure essential methods exist even if not provided in clientData\n    getFilteredData: () => clientData.filteredData || [],\n    calculateMetrics: () => clientData.metrics || null,\n    getRetailerDistribution: () => clientData.retailerData || [],\n    getProductDistribution: () => clientData.productDistribution || [],\n    \n    // Flags and metadata\n    isSharedView: true,\n    hasData: Boolean(clientData.filteredData?.length || clientData.salesData?.length),\n    \n    // For backward compatibility, ensure these exist\n    selectedProducts: clientData.filters?.selectedProducts || ['all'],\n    selectedRetailers: clientData.filters?.selectedRetailers || ['all'],\n    dateRange: clientData.filters?.dateRange || 'all',\n    startDate: clientData.filters?.startDate || '',\n    endDate: clientData.filters?.endDate || '',\n    selectedMonth: clientData.filters?.selectedMonth || '',\n    \n    // Empty functions for methods that shouldn't do anything in shared view\n    setSelectedProducts: () => {},\n    setSelectedRetailers: () => {},\n    setDateRange: () => {},\n    setActiveTab: () => {},\n  };\n};\n\nconst SharedDashboardView = () => {\n  const { shareId } = useParams();\n  const navigate = useNavigate();\n  const { darkMode } = useTheme();\n  const { transformDataForSharing } = useSharing();\n  \n  // Destructure only what we need from the DataContext\n  const { \n    setSalesData,\n    setSelectedProducts,\n    setSelectedRetailers,\n    setDateRange,\n    setStartDate,\n    setEndDate,\n    setSelectedMonth\n  } = useData();\n  \n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [shareConfig, setShareConfig] = useState(null);\n  const [activeTab, setActiveTab] = useState(null);\n  const [isExpired, setIsExpired] = useState(false);\n  const [isSupabaseMode, setIsSupabaseMode] = useState(true);\n  const [clientData, setClientData] = useState(null);\n  const [clientDisplayName, setClientDisplayName] = useState('Client Dashboard');\n  \n  // Check if the share ID looks like Base64 (fallback mode) or UUID (Supabase mode)\n  const isBase64ShareId = (id) => {\n    // If it contains characters that aren't valid in a UUID but are in Base64\n    return /[+/]/.test(id) || id.length > 40;\n  };\n  \n  // Load shared configuration from either Supabase or fallback method\n  useEffect(() => {\n    const fetchSharedDashboard = async () => {\n      try {\n        if (!shareId) {\n          throw new Error(\"No share ID provided\");\n        }\n        \n        setLoading(true);\n    \n        // Determine if we should use Supabase or fallback method based on share ID format\n        const useSupabase = !isBase64ShareId(shareId);\n        setIsSupabaseMode(useSupabase);\n        \n        let config;\n        let expired = false;\n        \n        console.log(\"Loading shared dashboard with ID:\", shareId);\n        console.log(\"Using Supabase mode:\", useSupabase);\n        \n        if (useSupabase) {\n          try {\n            // Try Supabase first\n            console.log(\"Using Supabase to fetch dashboard\");\n            const result = await sharingService.getSharedDashboard(shareId);\n            expired = result.expired;\n            config = result.config;\n            console.log(\"Supabase result:\", result);\n          } catch (err) {\n            console.error(\"Supabase fetch failed, trying fallback:\", err);\n            // If Supabase fails, try fallback method\n            try {\n              // We need to add padding to ensure valid base64\n              let paddedShareId = shareId;\n              while (paddedShareId.length % 4 !== 0) {\n                paddedShareId += '=';\n              }\n              \n              const decodedConfig = JSON.parse(atob(paddedShareId));\n              config = decodedConfig;\n              \n              // Check if share link is expired (fallback mode)\n              if (decodedConfig.expiryDate) {\n                const expiryDate = new Date(decodedConfig.expiryDate);\n                const now = new Date();\n                expired = expiryDate < now;\n              }\n              \n              setIsSupabaseMode(false);\n              console.log(\"Fallback decode successful:\", config);\n            } catch (fallbackErr) {\n              console.error(\"Fallback decode failed:\", fallbackErr);\n              throw new Error(\"Invalid or corrupted share link\");\n            }\n          }\n        } else {\n          // Directly use fallback method (Base64 encoded)\n          console.log(\"Using fallback mode to fetch dashboard\");\n          try {\n            // We need to add padding to ensure valid base64\n            let paddedShareId = shareId;\n            while (paddedShareId.length % 4 !== 0) {\n              paddedShareId += '=';\n            }\n            \n            const decodedConfig = JSON.parse(atob(paddedShareId));\n            config = decodedConfig;\n            \n            // Check if share link is expired (fallback mode)\n            if (decodedConfig.expiryDate) {\n              const expiryDate = new Date(decodedConfig.expiryDate);\n              const now = new Date();\n              expired = expiryDate < now;\n            }\n            \n            console.log(\"Fallback decoded config:\", config);\n          } catch (err) {\n            console.error(\"Error decoding fallback share:\", err);\n            throw new Error(\"Invalid or corrupted share link\");\n          }\n        }\n        \n        // Check if share link is expired\n        if (expired) {\n          setIsExpired(true);\n          setShareConfig(config); // Still set the config for branding display\n          setLoading(false);\n          return;\n        }\n        \n        setShareConfig(config);\n      \n        // Set active tab from config, ensuring it's in the allowed tabs\n        if (config.activeTab && config.allowedTabs && config.allowedTabs.includes(config.activeTab)) {\n          console.log(\"Setting active tab to config value:\", config.activeTab);\n          setActiveTab(config.activeTab);\n        } else if (config.allowedTabs && config.allowedTabs.length > 0) {\n          console.log(\"Setting active tab to first allowed tab:\", config.allowedTabs[0]);\n          setActiveTab(config.allowedTabs[0]);\n        } else {\n          console.log(\"No valid tabs found, defaulting to summary\");\n          setActiveTab('summary');\n        }\n\n        console.log(\"Shared dashboard configuration:\", {\n          activeTab: config.activeTab,\n          allowedTabs: config.allowedTabs,\n          setActiveTabTo: activeTab\n        });\n\n        // Set client display name\n        const displayName = getClientDisplayName(config);\n        setClientDisplayName(displayName + ' Dashboard');\n        console.log(\"Set client display name to:\", displayName + ' Dashboard');\n        \n        // Important: Store the client data directly from the precomputed data\n        if (config.precomputedData) {\n          // Create a deep copy to prevent reference issues\n          const precomputedData = JSON.parse(JSON.stringify(config.precomputedData));\n          \n          // Ensure clientName is properly set in the data\n          if (!precomputedData.clientName || precomputedData.clientName === 'Client') {\n            precomputedData.clientName = displayName;\n          }\n          \n          // Create a complete clientData object with all necessary methods\n          const newClientData = createSharedDataContext({\n            ...precomputedData,\n            filters: config.filters || {},\n            brandMapping: precomputedData.brandMapping || {},\n            brandNames: precomputedData.brandNames || [], \n            clientName: displayName,\n            shareConfig: config,\n            isSharedView: true\n          });\n          \n          console.log(\"Setting client data from precomputedData:\", newClientData);\n          setClientData(newClientData);\n          \n          // If we have salesData in precomputedData, set it in the DataContext\n          if (precomputedData.salesData && Array.isArray(precomputedData.salesData)) {\n            console.log(\"Setting salesData in DataContext from precomputedData\");\n            setSalesData(precomputedData.salesData);\n          }\n        } else {\n          console.warn(\"No precomputed data found in share config\");\n        }\n        \n        // Apply filters from the shared config\n        if (config.filters) {\n          if (config.filters.selectedProducts) setSelectedProducts(config.filters.selectedProducts);\n          if (config.filters.selectedRetailers) setSelectedRetailers(config.filters.selectedRetailers);\n          if (config.filters.dateRange) setDateRange(config.filters.dateRange);\n          if (config.filters.startDate) setStartDate(config.filters.startDate);\n          if (config.filters.endDate) setEndDate(config.filters.endDate);\n          if (config.filters.selectedMonth) setSelectedMonth(config.filters.selectedMonth);\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error loading shared dashboard:\", err);\n        setError(\"Invalid or expired share link\");\n        setLoading(false);\n      }\n    };\n    \n    fetchSharedDashboard();\n  }, [shareId, setSalesData, setSelectedProducts, setSelectedRetailers, setDateRange, setStartDate, setEndDate, setSelectedMonth]);\n\n  // Handle tab selection\n  const handleTabChange = (tab) => {\n    console.log(\"Changing active tab to:\", tab);\n    if (tab && shareConfig.allowedTabs.includes(tab)) {\n      setActiveTab(tab);\n    }\n  };\n  \n  // If still loading\n  if (loading) {\n    return (\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\n        <div className=\"text-center\">\n          <div className=\"inline-block w-8 h-8 border-t-2 border-b-2 border-pink-600 rounded-full animate-spin\"></div>\n          <p className=\"mt-4\">Loading shared dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // If error\n  if (error) {\n    return (\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\n          <h2 className=\"text-xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\n          <p className=\"mb-4\">{error}</p>\n          <button \n            onClick={() => navigate('/')}\n            className=\"px-4 py-2 bg-pink-600 text-white rounded-md hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-pink-500\"\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (isExpired) {\n    return (\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\n          <div className=\"text-amber-500 mb-4\">\n            <svg className=\"h-12 w-12 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-bold text-center mb-4\">This Dashboard Link Has Expired</h2>\n          <p className=\"text-center mb-6\">\n            Please contact {shareConfig.branding?.companyName || 'the dashboard owner'} for an updated link.\n          </p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!shareConfig) {\n    return (\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\n          <h2 className=\"text-xl font-bold text-center mb-4\">Dashboard Not Found</h2>\n          <p className=\"text-center mb-6\">\n            The dashboard you're looking for doesn't exist or may have been deleted.\n          </p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Ensure we have clientData to work with\n  if (!clientData) {\n    console.error(\"Missing client data for shared dashboard\");\n    return (\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\n          <h2 className=\"text-xl font-bold text-red-600 mb-4\">Error Loading Dashboard Data</h2>\n          <p className=\"mb-4\">The dashboard data could not be loaded.</p>\n        </div>\n      </div>\n    );\n  }\n  \n  // Transform data based on sharing config\n  const transformedData = transformDataForSharing ? \n    transformDataForSharing({...clientData, shareConfig}) : \n    clientData;\n  \n  // Check if there's data to display\n  const hasData = transformedData?.filteredData?.length > 0 || (transformedData?.salesData?.length > 0);\n  \n  return (\n    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>\n      {/* Storage type indicator - Only visible in development */}\n      {process.env.NODE_ENV === 'development' && (\n        <div className={`fixed top-0 right-0 m-4 z-50 px-3 py-1 rounded-full text-xs font-medium ${\n          isSupabaseMode \n            ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' \n            : 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300'\n        }`}>\n          {isSupabaseMode ? 'Supabase Mode' : 'Fallback Mode'}\n        </div>\n      )}\n      \n      {/* Header */}\n      <header className={`w-full border-b ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            {shareConfig.branding?.showLogo && (\n              <div \n                className=\"h-10 w-10 rounded-full mr-3 flex items-center justify-center\"\n                style={{ backgroundColor: shareConfig.branding.primaryColor || '#FF0066' }}\n              >\n                <span className=\"text-white font-bold text-lg\">\n                  {(shareConfig.branding.companyName || 'C').slice(0, 1)}\n                </span>\n              </div>\n            )}\n            <div>\n              <h1 className={`text-xl font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>\n                {clientDisplayName}\n              </h1>\n              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                Shared by {shareConfig.branding?.companyName || 'Shopmium Insights'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Client note if provided */}\n        {shareConfig.clientNote && (\n          <div className={`mb-6 p-4 rounded-lg ${darkMode ? 'bg-blue-900/20 text-blue-300' : 'bg-blue-50 text-blue-800'}`}>\n            <p>{shareConfig.clientNote}</p>\n          </div>\n        )}\n        \n        {/* Tabs navigation if multiple tabs are allowed */}\n        {shareConfig.allowedTabs && shareConfig.allowedTabs.length > 1 && (\n          <div className={`mb-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n            <div className=\"flex flex-wrap\">\n              {shareConfig.allowedTabs.map(tab => (\n                <button\n                  key={tab}\n                  onClick={() => handleTabChange(tab)}\n                  className={`py-3 px-4 border-b-2 font-medium text-sm whitespace-nowrap ${\n                    activeTab === tab\n                      ? `border-pink-500 ${darkMode ? 'text-pink-400' : 'text-pink-600'}`\n                      : `border-transparent ${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-700'}`\n                  }`}\n                >\n                  <span className=\"capitalize\">{tab}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n        \n       {/* Main content based on active tab */}\n        <div className={`bg-white dark:bg-gray-800 shadow rounded-lg ${!hasData ? 'p-6' : ''}`}>\n          {!hasData ? (\n            <div className=\"text-center py-12\">\n              <svg className=\"mx-auto h-12 w-12 text-gray-400 dark:text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n              <h3 className={`mt-2 text-base font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>No data available</h3>\n              <p className={`mt-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                There is no data to display with the current filters.\n              </p>\n            </div>\n          ) : (\n            <ErrorBoundary>\n              <ClientDataProvider clientData={transformedData}>\n                {/* Render the appropriate tab content */}\n                {activeTab === 'summary' && (\n                  <ErrorBoundary>\n                    <SummaryTab isSharedView={true} />\n                  </ErrorBoundary>\n                )}\n                {activeTab === 'sales' && (\n                  <ErrorBoundary>\n                    <SalesTab isSharedView={true} />\n                  </ErrorBoundary>\n                )}\n                {activeTab === 'demographics' && (\n                  <ErrorBoundary>\n                    <DemographicsTab isSharedView={true} />\n                  </ErrorBoundary>\n                )}\n                {activeTab === 'offers' && (\n                  <ErrorBoundary>\n                    <OffersTab isSharedView={true} />\n                  </ErrorBoundary>\n                )}\n              </ClientDataProvider>\n            </ErrorBoundary>\n          )}\n        </div>\n      </main>\n      \n      {/* Footer */}\n      <footer className={`w-full border-t ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center\">\n            <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n              Shared with you by {shareConfig.branding?.companyName || 'Shopmium Insights'}\n            </span>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default SharedDashboardView;"],"names":["SharedDashboardView","_transformedData$filt","_transformedData$sale","_shareConfig$branding2","_shareConfig$branding3","_shareConfig$branding4","shareId","useParams","navigate","useNavigate","darkMode","useTheme","transformDataForSharing","useSharing","setSalesData","setSelectedProducts","setSelectedRetailers","setDateRange","setStartDate","setEndDate","setSelectedMonth","useData","error","setError","useState","loading","setLoading","shareConfig","setShareConfig","activeTab","setActiveTab","isExpired","setIsExpired","isSupabaseMode","setIsSupabaseMode","clientData","setClientData","clientDisplayName","setClientDisplayName","useEffect","async","Error","useSupabase","test","id","length","config","expired","console","log","result","sharingService","getSharedDashboard","err","paddedShareId","decodedConfig","JSON","parse","atob","expiryDate","Date","fallbackErr","allowedTabs","includes","setActiveTabTo","displayName","_config$metadata","_config$metadata2","_config$precomputedDa","_config$precomputedDa2","metadata","clientName","brandNames","join","precomputedData","getClientDisplayName","stringify","newClientData","_clientData$filteredD","_clientData$salesData","_clientData$filters","_clientData$filters2","_clientData$filters3","_clientData$filters4","_clientData$filters5","_clientData$filters6","getFilteredData","filteredData","calculateMetrics","metrics","getRetailerDistribution","retailerData","getProductDistribution","productDistribution","isSharedView","hasData","Boolean","salesData","selectedProducts","filters","selectedRetailers","dateRange","startDate","endDate","selectedMonth","createSharedDataContext","brandMapping","Array","isArray","warn","fetchSharedDashboard","_jsx","className","children","_jsxs","onClick","_shareConfig$branding","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","branding","companyName","transformedData","process","showLogo","style","backgroundColor","primaryColor","slice","clientNote","map","tab","handleTabChange","ErrorBoundary","ClientDataProvider","SummaryTab","SalesTab","DemographicsTab","OffersTab"],"sourceRoot":""}