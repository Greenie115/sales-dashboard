{"version":3,"file":"static/js/176.d4979f4d.chunk.js","mappings":"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","sources":["components/sharing/SharedDashboardView.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'; // Add useMemo import\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useTheme } from '../../context/ThemeContext';\r\n// useSharing and useData imports removed\r\nimport { ClientDataProvider } from '../../context/ClientDataContext'; // To provide snapshot data\r\nimport supabase from '../../utils/supabase'; // Import supabase for auth check\r\nimport { calculateMetrics } from '../../utils/dataProcessing'; // Import if needed for dataForProvider\r\nimport SummaryTab from '../dashboard/tabs/SummaryTab';\r\nimport SalesTab from '../dashboard/tabs/SalesTab';\r\nimport DemographicsTab from '../dashboard/tabs/DemographicsTab';\r\nimport OffersTab from '../dashboard/tabs/OffersTab';\r\nimport ErrorBoundary from '../ErrorBoundary';\r\nimport sharingService from '../../services/sharingService';\r\n\r\n// Helper functions getClientDisplayName and createSharedDataContext removed.\r\n\r\nconst SharedDashboardView = () => {\r\n  const { shareId } = useParams();\r\n  const navigate = useNavigate();\r\n  const { darkMode } = useTheme();\r\n  // Unused context hooks/setters removed.\r\n\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('summary'); // Default active tab\r\n  const [isExpired, setIsExpired] = useState(false);\r\n  const [clientData, setClientData] = useState({ // State to hold snapshot and filters\r\n      filterParams: null,\r\n      dataSnapshot: null,\r\n      allowedTabs: ['summary', 'sales', 'demographics', 'offers'], // Default or fetch if stored\r\n      // shareConfig: {} // Removed placeholder, specific config can be added if needed\r\n  });\r\n  const [clientDisplayName, setClientDisplayName] = useState('Shared Dashboard'); // Default name\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [authLoading, setAuthLoading] = useState(true);\r\n\r\n  // isBase64ShareId function removed.\r\n\r\n  // Check authentication status first\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      setAuthLoading(true);\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (session) {\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        setIsAuthenticated(false);\r\n        // Optional: Redirect to login immediately if not authenticated\r\n        // navigate('/login'); // Or your login route\r\n      }\r\n      setAuthLoading(false);\r\n    };\r\n    checkAuth();\r\n  }, [navigate]);\r\n\r\n  // Load shared view data if authenticated\r\n  useEffect(() => {\r\n    // Define the async function to fetch data\r\n    const fetchSharedData = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      setIsExpired(false);\r\n\r\n      try {\r\n        if (!shareId) {\r\n          throw new Error(\"No share ID provided\");\r\n        }\r\n\r\n        console.log(\"Fetching shared dashboard with ID:\", shareId);\r\n        const result = await sharingService.getSharedDashboard(shareId);\r\n        console.log(\"Result from getSharedDashboard:\", result);\r\n\r\n        if (result.expired) {\r\n          console.log('Dashboard has expired');\r\n          setIsExpired(true);\r\n          return;\r\n        }\r\n\r\n        if (!result.shareConfig) {\r\n          console.error('Missing share configuration in result:', result);\r\n          setError(\"Shared dashboard data is invalid or incomplete.\");\r\n          return;\r\n        }\r\n\r\n        // Store fetched data successfully\r\n        const config = result.shareConfig;\r\n        console.log('Processing share configuration:', config);\r\n\r\n        // Validate required data\r\n        if (!config.precomputedData) {\r\n          console.error('Missing precomputed data in share config');\r\n          setError(\"Shared dashboard is missing required data.\");\r\n          return;\r\n        }\r\n\r\n        // Set client data from the configuration\r\n        setClientData(prev => ({\r\n          ...prev,\r\n          filterParams: config.filters || {},\r\n          dataSnapshot: config.precomputedData || {},\r\n          allowedTabs: Array.isArray(config.allowedTabs) ? config.allowedTabs : ['summary'],\r\n          activeTab: config.activeTab || 'summary'\r\n        }));\r\n\r\n        console.log('Client data set successfully');\r\n\r\n        // Set active tab from the shared dashboard\r\n        if (config.activeTab &&\r\n            config.allowedTabs &&\r\n            Array.isArray(config.allowedTabs) &&\r\n            config.allowedTabs.includes(config.activeTab)) {\r\n          setActiveTab(config.activeTab);\r\n          console.log(`Active tab set to: ${config.activeTab}`);\r\n        } else {\r\n          setActiveTab('summary'); // Default tab\r\n          console.log('Active tab defaulted to summary');\r\n        }\r\n\r\n        // Set client display name\r\n        let displayName = 'Shared Dashboard';\r\n\r\n        if (config.clientName) {\r\n          displayName = config.clientName;\r\n        } else if (config.metadata && config.metadata.clientName) {\r\n          displayName = config.metadata.clientName;\r\n        } else if (config.metadata && Array.isArray(config.metadata.brandNames) && config.metadata.brandNames.length > 0) {\r\n          displayName = config.metadata.brandNames.join(', ');\r\n        }\r\n\r\n        setClientDisplayName(displayName);\r\n        console.log(`Client display name set to: ${displayName}`);\r\n\r\n        console.log('Dashboard loaded successfully');\r\n      } catch (err) {\r\n        console.error(\"Error loading shared dashboard:\", err);\r\n        setError(err.message || \"Failed to load shared dashboard.\");\r\n        // Clear potentially incomplete data on error\r\n        setClientData(prev => ({ ...prev, filterParams: null, dataSnapshot: null }));\r\n      } finally {\r\n        setLoading(false); // Ensure loading is set to false in all cases\r\n      }\r\n    };\r\n\r\n    // Only fetch data if authentication is complete and successful\r\n    if (!authLoading) {\r\n      if (isAuthenticated) {\r\n        fetchSharedData(); // Call the async function here\r\n      } else {\r\n        // If not authenticated, stop loading and set an error message\r\n        setLoading(false);\r\n        setError(\"Authentication required to view this dashboard.\");\r\n        console.log(\"User not authenticated, cannot load shared view.\");\r\n      }\r\n    }\r\n    // Effect depends on auth status and shareId\r\n  }, [shareId, authLoading, isAuthenticated]); // Removed navigate dependency\r\n\r\n  // Check for incomplete data *after* loading/error/expiry checks.\r\n  const isDataIncomplete = !loading && !error && !isExpired && (!clientData.dataSnapshot || !clientData.filterParams);\r\n\r\n  // This useEffect now runs unconditionally, but the setError call inside depends on isDataIncomplete.\r\n  useEffect(() => {\r\n    if (isDataIncomplete) {\r\n       console.error(\"Snapshot data is missing after successful load attempt\", clientData);\r\n       setError(\"Shared dashboard data is incomplete or missing.\");\r\n    }\r\n    // This effect should run when isDataIncomplete changes.\r\n  }, [isDataIncomplete]);\r\n\r\n  // Construct the data object needed by ClientDataProvider using useMemo.\r\n  // This hook is now called unconditionally.\r\n  const dataForProvider = useMemo(() => {\r\n    // Internal logic handles data readiness.\r\n    if (clientData.dataSnapshot && clientData.filterParams) {\r\n      const snapshotMetrics = calculateMetrics(clientData.dataSnapshot);\r\n      return {\r\n        filteredData: clientData.dataSnapshot,\r\n        filters: clientData.filterParams,\r\n        metrics: snapshotMetrics,\r\n        isSharedView: true,\r\n        // Add other derived data/config as needed\r\n      };\r\n    }\r\n    return null; // Return null if data isn't ready\r\n  }, [clientData.dataSnapshot, clientData.filterParams]); // Dependencies remain the same\r\n\r\n  // Check if data is ready for rendering using the memoized value.\r\n  const hasData = !!dataForProvider?.filteredData?.length;\r\n\r\n  // Handle tab selection\r\n  const handleTabChange = (tab) => {\r\n    console.log(\"Changing active tab to:\", tab);\r\n    // Use allowedTabs from clientData state\r\n    if (tab && clientData.allowedTabs?.includes(tab)) {\r\n      setActiveTab(tab);\r\n    }\r\n  };\r\n\r\n  // If still loading\r\n  // Add check for auth loading and authentication status\r\n  if (authLoading || loading) {\r\n    return (\r\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\r\n        <div className=\"text-center\">\r\n          <div className=\"inline-block w-8 h-8 border-t-2 border-b-2 border-pink-600 rounded-full animate-spin\"></div>\r\n          <p className=\"mt-4\">{authLoading ? 'Checking authentication...' : 'Loading shared dashboard...'}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Authentication check moved inside the loading block\r\n\r\n  // If error\r\n  if (error) {\r\n    return (\r\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\r\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\r\n          <h2 className=\"text-xl font-bold text-red-600 mb-4\">Error Loading Dashboard</h2>\r\n          <p className=\"mb-4\">{error}</p>\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"px-4 py-2 bg-pink-600 text-white rounded-md hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-pink-500\"\r\n          >\r\n            Go to Dashboard\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isExpired) {\r\n    return (\r\n      <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'} flex items-center justify-center p-4`}>\r\n        <div className={`w-full max-w-md p-6 rounded-lg shadow-lg ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>\r\n          <div className=\"text-amber-500 mb-4\">\r\n            <svg className=\"h-12 w-12 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n          </div>\r\n          <h2 className=\"text-xl font-bold text-center mb-4\">This Dashboard Link Has Expired</h2>\r\n          <p className=\"text-center mb-6\">\r\n            Please contact the person who shared this link for an updated version.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>\r\n      {/* Storage type indicator - Only visible in development */}\r\n      {/* Supabase/Fallback mode indicator removed */}\r\n\r\n      {/* Header */}\r\n      <header className={`w-full border-b ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex items-center justify-between\">\r\n          <div className=\"flex items-center\">\r\n            {/* TODO: Add branding logo if stored/fetched */}\r\n            {/* Example placeholder */}\r\n             <div className=\"h-10 w-10 rounded-full mr-3 flex items-center justify-center bg-pink-600\">\r\n                 <span className=\"text-white font-bold text-lg\">S</span>\r\n             </div>\r\n            <div>\r\n              <h1 className={`text-xl font-semibold ${darkMode ? 'text-white' : 'text-gray-900'}`}>\r\n                {clientDisplayName}\r\n              </h1>\r\n              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\r\n                Shared Dashboard {/* TODO: Add 'Shared by' if branding info available */}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Main content */}\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n        {/* Client note if provided */}\r\n        {/* TODO: Add client note if stored/fetched */}\r\n        {/* {clientData.shareConfig?.clientNote && ( ... )} */}\r\n\r\n        {/* Tabs navigation if multiple tabs are allowed */}\r\n        {/* Use allowedTabs from clientData state */}\r\n        {clientData.allowedTabs && clientData.allowedTabs.length > 1 && (\r\n          <div className={`mb-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>\r\n            <div className=\"flex flex-wrap\">\r\n              {clientData.allowedTabs.map(tab => (\r\n                <button\r\n                  key={tab}\r\n                  onClick={() => handleTabChange(tab)}\r\n                  className={`py-3 px-4 border-b-2 font-medium text-sm whitespace-nowrap ${\r\n                    activeTab === tab\r\n                      ? `border-pink-500 ${darkMode ? 'text-pink-400' : 'text-pink-600'}`\r\n                      : `border-transparent ${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-700'}`\r\n                  }`}\r\n                >\r\n                  <span className=\"capitalize\">{tab}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n       {/* Main content based on active tab */}\r\n        <div className={`bg-white dark:bg-gray-800 shadow rounded-lg ${!hasData ? 'p-6' : ''}`}>\r\n          {!hasData ? (\r\n            <div className=\"text-center py-12\">\r\n              <svg className=\"mx-auto h-12 w-12 text-gray-400 dark:text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n              </svg>\r\n              <h3 className={`mt-2 text-base font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>No data available</h3>\r\n              <p className={`mt-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\r\n                There is no data to display with the current filters.\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <ErrorBoundary>\r\n              {/* Provide the memoized data object */}\r\n              <ClientDataProvider clientData={dataForProvider}>\r\n                {/* Render the appropriate tab content */}\r\n                {activeTab === 'summary' && (\r\n                  <ErrorBoundary>\r\n                    <SummaryTab isSharedView={true} />\r\n                  </ErrorBoundary>\r\n                )}\r\n                {activeTab === 'sales' && (\r\n                  <ErrorBoundary>\r\n                    <SalesTab isSharedView={true} />\r\n                  </ErrorBoundary>\r\n                )}\r\n                {activeTab === 'demographics' && (\r\n                  <ErrorBoundary>\r\n                    <DemographicsTab isSharedView={true} />\r\n                  </ErrorBoundary>\r\n                )}\r\n                {activeTab === 'offers' && (\r\n                  <ErrorBoundary>\r\n                    <OffersTab isSharedView={true} />\r\n                  </ErrorBoundary>\r\n                )}\r\n              </ClientDataProvider>\r\n            </ErrorBoundary>\r\n          )}\r\n        </div>\r\n      </main>\r\n\r\n      {/* Footer */}\r\n      <footer className={`w-full border-t ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\r\n          <div className=\"flex items-center\">\r\n            <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>\r\n              Shared Dashboard View\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SharedDashboardView;"],"names":["SharedDashboardView","_dataForProvider$filt","shareId","useParams","navigate","useNavigate","darkMode","useTheme","error","setError","useState","loading","setLoading","activeTab","setActiveTab","isExpired","setIsExpired","clientData","setClientData","filterParams","dataSnapshot","allowedTabs","clientDisplayName","setClientDisplayName","isAuthenticated","setIsAuthenticated","authLoading","setAuthLoading","useEffect","async","data","session","supabase","auth","getSession","checkAuth","Error","console","log","result","sharingService","getSharedDashboard","expired","shareConfig","config","precomputedData","prev","filters","Array","isArray","includes","displayName","clientName","metadata","brandNames","length","join","err","message","fetchSharedData","isDataIncomplete","dataForProvider","useMemo","snapshotMetrics","calculateMetrics","filteredData","metrics","isSharedView","hasData","_jsx","className","children","_jsxs","onClick","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","map","tab","_clientData$allowedTa","handleTabChange","ErrorBoundary","ClientDataProvider","SummaryTab","SalesTab","DemographicsTab","OffersTab"],"sourceRoot":""}