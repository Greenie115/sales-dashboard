{"version":3,"file":"static/js/736.13c1ab7a.chunk.js","mappings":"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","sources":["components/admin/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useData } from '../../context/DataContext';\r\nimport { useSharing } from '../../context/SharingContext';\r\nimport { useTheme } from '../../context/ThemeContext';\r\nimport { useChartColors } from '../../utils/chartColors';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts';\r\n\r\nconst AdminDashboard = () => {\r\n  const colors = useChartColors();\r\n  const { salesData } = useData();\r\n  const { sharedDashboards } = useSharing();\r\n  \r\n  const [systemMetrics, setSystemMetrics] = useState({\r\n    uptime: 0,\r\n    memoryUsage: 0,\r\n    loadTime: 0,\r\n    errorCount: 0\r\n  });\r\n\r\n  // Simulate system metrics\r\n  useEffect(() => {\r\n    const updateMetrics = () => {\r\n      setSystemMetrics({\r\n        uptime: Math.floor((Date.now() - performance.timing.navigationStart) / 1000 / 60), // Minutes since page load\r\n        memoryUsage: navigator.deviceMemory ? Math.random() * navigator.deviceMemory * 0.5 : Math.random() * 4,\r\n        loadTime: performance.timing.loadEventEnd - performance.timing.navigationStart,\r\n        errorCount: Math.floor(Math.random() * 3) // Random error count for demo\r\n      });\r\n    };\r\n\r\n    updateMetrics();\r\n    const interval = setInterval(updateMetrics, 30000); // Update every 30 seconds\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Data usage analytics\r\n  const dataAnalytics = useMemo(() => {\r\n    if (!salesData || salesData.length === 0) return null;\r\n\r\n    const totalRecords = salesData.length;\r\n    const uniqueRetailers = new Set(salesData.map(item => item.chain)).size;\r\n    const uniqueProducts = new Set(salesData.map(item => item.product_name)).size;\r\n    const dateRange = salesData.reduce((range, item) => {\r\n      const date = new Date(item.receipt_date);\r\n      if (!range.start || date < range.start) range.start = date;\r\n      if (!range.end || date > range.end) range.end = date;\r\n      return range;\r\n    }, { start: null, end: null });\r\n\r\n    // Monthly data volume\r\n    const monthlyData = salesData.reduce((acc, item) => {\r\n      const month = new Date(item.receipt_date).toISOString().slice(0, 7);\r\n      acc[month] = (acc[month] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const monthlyChart = Object.entries(monthlyData)\r\n      .sort(([a], [b]) => a.localeCompare(b))\r\n      .slice(-12) // Last 12 months\r\n      .map(([month, count]) => ({\r\n        month: new Date(month + '-01').toLocaleDateString('en-US', { month: 'short', year: '2-digit' }),\r\n        records: count\r\n      }));\r\n\r\n    return {\r\n      totalRecords,\r\n      uniqueRetailers,\r\n      uniqueProducts,\r\n      dateRange,\r\n      monthlyChart,\r\n      averageRecordsPerDay: Math.round(totalRecords / ((dateRange.end - dateRange.start) / (1000 * 60 * 60 * 24)) || 1)\r\n    };\r\n  }, [salesData]);\r\n\r\n  // Sharing analytics  \r\n  const sharingAnalytics = useMemo(() => {\r\n    if (!sharedDashboards || sharedDashboards.length === 0) return null;\r\n\r\n    const activeShares = sharedDashboards.filter(share => new Date(share.expiresAt) > new Date()).length;\r\n    const expiredShares = sharedDashboards.length - activeShares;\r\n    \r\n    const sharingByType = sharedDashboards.reduce((acc, share) => {\r\n      const config = share.config || {};\r\n      const type = config.hideValues && config.hideRetailers ? 'Anonymous' : \r\n                   config.hideRetailers ? 'Hidden Retailers' :\r\n                   config.hideValues ? 'Hidden Values' : 'Open';\r\n      acc[type] = (acc[type] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    const sharingTypeChart = Object.entries(sharingByType).map(([type, count]) => ({\r\n      name: type,\r\n      value: count\r\n    }));\r\n\r\n    return {\r\n      totalShares: sharedDashboards.length,\r\n      activeShares,\r\n      expiredShares,\r\n      sharingTypeChart\r\n    };\r\n  }, [sharedDashboards]);\r\n\r\n  // Performance metrics\r\n  const performanceData = useMemo(() => {\r\n    const metrics = [];\r\n    const now = Date.now();\r\n    \r\n    // Generate last 24 hours of mock performance data\r\n    for (let i = 23; i >= 0; i--) {\r\n      const hour = new Date(now - i * 60 * 60 * 1000);\r\n      metrics.push({\r\n        time: hour.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }),\r\n        responseTime: Math.random() * 200 + 50, // 50-250ms\r\n        requests: Math.floor(Math.random() * 100) + 10, // 10-110 requests\r\n        errors: Math.floor(Math.random() * 5) // 0-5 errors\r\n      });\r\n    }\r\n    \r\n    return metrics;\r\n  }, []);\r\n\r\n  if (!dataAnalytics) {\r\n    return (\r\n      <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\r\n        <div className=\"text-center\">\r\n          <div className=\"mx-auto h-12 w-12 text-gray-400 dark:text-gray-500\">\r\n            <svg fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n          </div>\r\n          <h2 className=\"mt-2 text-lg font-semibold text-gray-700 dark:text-gray-300\">Admin Dashboard</h2>\r\n          <p className=\"mt-1 text-gray-500 dark:text-gray-400\">No data available for monitoring</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const CustomTooltip = ({ active, payload, label }) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-white dark:bg-gray-800 p-3 shadow-md rounded-md border border-gray-200 dark:border-gray-700\">\r\n          <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{label}</p>\r\n          {payload.map((entry, index) => (\r\n            <p key={index} className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              <span className=\"inline-block w-3 h-3 mr-1 rounded-full\" style={{ backgroundColor: entry.color }}></span>\r\n              {entry.name}: {typeof entry.value === 'number' ? entry.value.toLocaleString() : entry.value}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 border border-gray-200 dark:border-gray-700\">\r\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-6\">System Administration</h1>\r\n        \r\n        {/* System Health Metrics */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n          <div className=\"bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-900/30 p-4 rounded-lg border border-green-200 dark:border-green-800/30\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg className=\"h-8 w-8 text-green-600 dark:text-green-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">System Status</p>\r\n                <p className=\"text-lg font-semibold text-green-600 dark:text-green-400\">Online</p>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Uptime: {systemMetrics.uptime}m</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-900/30 p-4 rounded-lg border border-blue-200 dark:border-blue-800/30\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Performance</p>\r\n                <p className=\"text-lg font-semibold text-blue-600 dark:text-blue-400\">{systemMetrics.loadTime}ms</p>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Load time</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-900/30 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800/30\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg className=\"h-8 w-8 text-yellow-600 dark:text-yellow-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Memory Usage</p>\r\n                <p className=\"text-lg font-semibold text-yellow-600 dark:text-yellow-400\">{systemMetrics.memoryUsage.toFixed(1)}GB</p>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Current usage</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-900/30 p-4 rounded-lg border border-red-200 dark:border-red-800/30\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg className=\"h-8 w-8 text-red-600 dark:text-red-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L5.082 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Errors</p>\r\n                <p className=\"text-lg font-semibold text-red-600 dark:text-red-400\">{systemMetrics.errorCount}</p>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Last 24h</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Data Overview */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\r\n          <div className=\"bg-gray-50 dark:bg-gray-700/50 p-6 rounded-lg\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Data Overview</h3>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600 dark:text-gray-400\">Total Records</span>\r\n                <span className=\"font-semibold text-gray-900 dark:text-white\">{dataAnalytics.totalRecords.toLocaleString()}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600 dark:text-gray-400\">Unique Retailers</span>\r\n                <span className=\"font-semibold text-gray-900 dark:text-white\">{dataAnalytics.uniqueRetailers}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600 dark:text-gray-400\">Unique Products</span>\r\n                <span className=\"font-semibold text-gray-900 dark:text-white\">{dataAnalytics.uniqueProducts}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600 dark:text-gray-400\">Avg Records/Day</span>\r\n                <span className=\"font-semibold text-gray-900 dark:text-white\">{dataAnalytics.averageRecordsPerDay}</span>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600 dark:text-gray-400\">Date Range</span>\r\n                <span className=\"font-semibold text-gray-900 dark:text-white text-xs\">\r\n                  {dataAnalytics.dateRange.start?.toLocaleDateString()} - {dataAnalytics.dateRange.end?.toLocaleDateString()}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {sharingAnalytics && (\r\n            <div className=\"bg-gray-50 dark:bg-gray-700/50 p-6 rounded-lg\">\r\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Sharing Activity</h3>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">Total Shares</span>\r\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">{sharingAnalytics.totalShares}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">Active Shares</span>\r\n                  <span className=\"font-semibold text-green-600 dark:text-green-400\">{sharingAnalytics.activeShares}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600 dark:text-gray-400\">Expired Shares</span>\r\n                  <span className=\"font-semibold text-red-600 dark:text-red-400\">{sharingAnalytics.expiredShares}</span>\r\n                </div>\r\n              </div>\r\n              \r\n              {sharingAnalytics.sharingTypeChart.length > 0 && (\r\n                <div className=\"mt-6\">\r\n                  <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Sharing Types</h4>\r\n                  <ResponsiveContainer width=\"100%\" height={150}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={sharingAnalytics.sharingTypeChart}\r\n                        dataKey=\"value\"\r\n                        nameKey=\"name\"\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        outerRadius={60}\r\n                        innerRadius={30}\r\n                      >\r\n                        {sharingAnalytics.sharingTypeChart.map((entry, index) => (\r\n                          <Cell key={`cell-${index}`} fill={colors.colorPalette[index % colors.colorPalette.length]} />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Charts */}\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\r\n          {/* Monthly Data Volume */}\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Monthly Data Volume</h3>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <BarChart data={dataAnalytics.monthlyChart}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke={colors.gridColor} />\r\n                <XAxis \r\n                  dataKey=\"month\"\r\n                  tick={{ fontSize: 12, fill: colors.textSecondary }}\r\n                  tickLine={false}\r\n                  axisLine={{ stroke: colors.axisColor }}\r\n                />\r\n                <YAxis \r\n                  tick={{ fontSize: 12, fill: colors.textSecondary }}\r\n                  tickLine={false}\r\n                  axisLine={{ stroke: colors.axisColor }}\r\n                />\r\n                <Tooltip content={<CustomTooltip />} />\r\n                <Bar dataKey=\"records\" fill={colors.primary} radius={[4, 4, 0, 0]} />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n\r\n          {/* Performance Metrics */}\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Performance (24h)</h3>\r\n            <ResponsiveContainer width=\"100%\" height={250}>\r\n              <LineChart data={performanceData}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke={colors.gridColor} />\r\n                <XAxis \r\n                  dataKey=\"time\"\r\n                  tick={{ fontSize: 12, fill: colors.textSecondary }}\r\n                  tickLine={false}\r\n                  axisLine={{ stroke: colors.axisColor }}\r\n                  interval={5}\r\n                />\r\n                <YAxis \r\n                  tick={{ fontSize: 12, fill: colors.textSecondary }}\r\n                  tickLine={false}\r\n                  axisLine={{ stroke: colors.axisColor }}\r\n                />\r\n                <Tooltip content={<CustomTooltip />} />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"responseTime\" \r\n                  stroke={colors.primary} \r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  name=\"Response Time (ms)\"\r\n                />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"requests\" \r\n                  stroke={colors.secondary} \r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  name=\"Requests\"\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;"],"names":["AdminDashboard","_dataAnalytics$dateRa","_dataAnalytics$dateRa2","colors","useChartColors","salesData","useData","sharedDashboards","useSharing","systemMetrics","setSystemMetrics","useState","uptime","memoryUsage","loadTime","errorCount","useEffect","updateMetrics","Math","floor","Date","now","performance","timing","navigationStart","navigator","deviceMemory","random","loadEventEnd","interval","setInterval","clearInterval","dataAnalytics","useMemo","length","totalRecords","uniqueRetailers","Set","map","item","chain","size","uniqueProducts","product_name","dateRange","reduce","range","date","receipt_date","start","end","monthlyData","acc","month","toISOString","slice","monthlyChart","Object","entries","sort","_ref","_ref2","a","b","localeCompare","_ref3","count","toLocaleDateString","year","records","averageRecordsPerDay","round","sharingAnalytics","activeShares","filter","share","expiresAt","expiredShares","sharingByType","config","type","hideValues","hideRetailers","sharingTypeChart","_ref4","name","value","totalShares","performanceData","metrics","i","hour","push","time","toLocaleTimeString","minute","responseTime","requests","errors","_jsx","className","children","_jsxs","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","CustomTooltip","_ref5","active","payload","label","entry","index","style","backgroundColor","color","toLocaleString","toFixed","ResponsiveContainer","width","height","PieChart","Pie","data","dataKey","nameKey","cx","cy","outerRadius","innerRadius","Cell","colorPalette","Tooltip","content","BarChart","CartesianGrid","strokeDasharray","gridColor","XAxis","tick","fontSize","textSecondary","tickLine","axisLine","axisColor","YAxis","Bar","primary","radius","LineChart","Line","dot","secondary"],"sourceRoot":""}